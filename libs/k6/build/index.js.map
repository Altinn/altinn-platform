{
  "version": 3,
  "sources": ["../src/slack/payload.js", "../src/config.js", "../src/slack/slack.js", "../src/index.js"],
  "sourcesContent": ["export function createDefaultPayload() {\n  return {\n    attachments: [\n      {\n        color: '#632eb8',\n        blocks: [\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text: '*|K6 Report Summary*',\n            },\n          },\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text: '',\n            },\n            accessory: {\n              type: 'image',\n              image_url: 'https://k6.io/images/landscape-icon.png',\n              alt_text: 'k6 thumbnail',\n            },\n          },\n          {\n            type: 'divider',\n          },\n          {\n            type: 'actions',\n            elements: [\n              {\n                type: 'button',\n                text: {\n                  type: 'plain_text',\n                  text: 'Grafana :grafana:',\n                  emoji: true,\n                },\n                value: 'click_me_123',\n                url: '',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n}\n", "export const config = {\n  grafanaBaseUrl:\n    __ENV.GRAFANA_BASE_URL ??\n    'https://altinn-grafana-test-b2b8dpdkcvfuhfd3.eno.grafana.azure.com',\n  k6PrometheusDashboard:\n    __ENV.K6_PROMETHEUS_DASHBOARD ??\n    'd/ccbb2351-2ae2-462f-ae0e-f2c893ad1028/k6-prometheus',\n  datasource: __ENV.DATASOURCE ?? 'k6tests-amw',\n};\n", "import http from 'k6/http';\n\nimport { createDefaultPayload } from './payload';\nimport * as config from '../config';\n\nfunction performanceMetrics(data) {\n  const numberOfRequests = data.metrics.http_reqs.values['count'];\n  const maxThroughput = data.metrics.http_reqs.values['rate'].toFixed(2);\n  const avgReqDuration =\n    data.metrics.http_req_duration.values['avg'].toFixed(2);\n  const p95ReqDuration =\n    data.metrics.http_req_duration.values['p(95)'].toFixed(2);\n  const p99ReqDuration =\n    data.metrics.http_req_duration.values['p(99)'].toFixed(2);\n\n  return `*Number of Requests:* ${numberOfRequests} reqs\n*Max Throughput:* ${maxThroughput} reqs/s\n*Average Response Time:* ${avgReqDuration} ms\n*p(95) Response Time:* ${p95ReqDuration} ms\n*p(99) Response Time:* ${p99ReqDuration} ms`;\n}\n\nfunction checkMetrics(data) {\n  let numberOfChecks = data.root_group.checks.length;\n  let checksString = '';\n  let checks = data.root_group.checks;\n\n  for (let i = 0; i < numberOfChecks; i++) {\n    let passingChecks = checks[i].passes;\n    let totalChecks = checks[i].passes + checks[i].fails;\n    let successRate = (passingChecks / totalChecks) * 100;\n    checksString += `*Check*: '${checks[i].name}' had a Success Rate of: ${successRate}%\\n`;\n  }\n  return checksString;\n}\n\nfunction buildPayload(data, reportType) {\n  var payload = createDefaultPayload();\n  let sectionBlocks = payload.attachments.find(\n    (attachments) => attachments.blocks[1].type === 'section',\n  );\n\n  switch (reportType) {\n    case 'performance':\n      sectionBlocks.blocks[1].text.text = performanceMetrics(data);\n      break;\n    case 'checks':\n      sectionBlocks.blocks[1].text.text = checkMetrics(data);\n      break;\n    default:\n      sectionBlocks.blocks[1].text.text = performanceMetrics(data);\n  }\n\n  sectionBlocks.blocks[3].elements[0].url = `${config.grafanaBaseUrl}/\\\n${config.k6PrometheusDashboard}\\\n?orgId=1\\\n&var-DS_PROMETHEUS=${config.datasource}\\\n&var-namespace=${__ENV.NAMESPACE}\\\n&var-testid=${__ENV.TESTID}\\\n&from=${__ENV.MANIFEST_GENERATION_TIMESTAMP}\\\n&to=${new Date().getTime()}`;\n\n  return payload;\n}\n\nfunction buildHeaders() {\n  return {\n    headers: {\n      Authorization: 'Bearer ' + __ENV.SLACK_TOKEN,\n      'Content-type': 'application/json',\n    },\n  };\n}\n\nfunction postSlackMessage(data, reportType = 'performance') {\n  if (!__ENV.SLACK_WEBHOOK_URL) {\n    console.error('SLACK_WEBHOOK_URL environment variable is not defined');\n    return;\n  }\n  if (!__ENV.SLACK_TOKEN) {\n    console.error('SLACK_TOKEN environment variable is not defined');\n    return;\n  }\n\n  const headers = buildHeaders();\n  var payload = buildPayload(data, reportType);\n  const body = JSON.stringify(payload);\n\n  try {\n    const slackRes = http.post(__ENV.SLACK_WEBHOOK_URL, body, headers);\n    if (slackRes.status != 200) {\n      console.error('Could not send summary, got status ' + slackRes.status);\n    }\n  } catch (error) {\n    console.error('Error sending Slack message:', error);\n  }\n}\n\nexports.postSlackMessage = postSlackMessage;\n", "export { slack } from './slack/slack.js';\n"],
  "mappings": "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",
  "names": ["createDefaultPayload", "init_payload", "__esmMin", "config", "init_config", "__esmMin", "require_slack", "__commonJSMin", "exports", "import_http", "init_payload", "init_config", "performanceMetrics", "data", "numberOfRequests", "maxThroughput", "avgReqDuration", "p95ReqDuration", "p99ReqDuration", "checkMetrics", "numberOfChecks", "checksString", "checks", "i", "passingChecks", "totalChecks", "successRate", "buildPayload", "reportType", "payload", "createDefaultPayload", "sectionBlocks", "attachments", "buildHeaders", "postSlackMessage", "headers", "body", "slackRes", "http", "error", "src_exports", "__export", "__toCommonJS", "import_slack"]
}
