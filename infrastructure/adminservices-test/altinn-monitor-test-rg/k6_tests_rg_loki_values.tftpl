loki:
  pattern_ingester:
    enabled: true
  storage:
    type: azure
    bucketNames:
      chunks: "${chunks_container_name}"
      ruler: "${ruler_container_name}"
    azure:
      accountName: "${account_name}"
      useFederatedToken: true
  structuredConfig:
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
      retention_period: 672h # 28 days retention
    ingester:
      chunk_encoding: snappy
    compactor:
      retention_enabled: true
      delete_request_store: azure
    ruler:
      enable_api: true
      storage:
        type: azure
        azure:
          account_name: "${account_name}"
          container_name: "${ruler_container_name}"
          use_federated_token: true
    querier:
      max_concurrent: 4
    schema_config:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: azure
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    storage_config:
      tsdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        cache_ttl: 168h
      azure:
        account_name: "${account_name}"
        container_name: "${chunks_container_name}"
        use_federated_token: true

  podLabels:
    "azure.workload.identity/use": "true"

# Define the Azure workload identity
serviceAccount:
  name: loki
  annotations:
    "azure.workload.identity/client-id": "${client_id}"
  labels:
    "azure.workload.identity/use": "true"

deploymentMode: Distributed

ingester:
  replicas: 3
  maxUnavailable: 1
  zoneAwareReplication:
    enabled: false

querier:
  replicas: 3
  maxUnavailable: 2

queryFrontend:
  replicas: 2
  maxUnavailable: 1

queryScheduler:
  replicas: 2

distributor:
  replicas: 3
  maxUnavailable: 2
compactor:
  replicas: 1

indexGateway:
  replicas: 2
  maxUnavailable: 1

ruler:
  replicas: 1
  maxUnavailable: 1

# This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  service:
    type: LoadBalancer
  basicAuth:
    enabled: true
    existingSecret: loki-basic-auth

# Since we are using basic auth, we need to pass the username and password to the canary
lokiCanary:
  extraArgs:
    - -pass=$(LOKI_PASS)
    - -user=$(LOKI_USER)
  extraEnv:
    - name: LOKI_PASS
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: password
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: username

# Enable minio for storage
minio:
  enabled: false

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0
