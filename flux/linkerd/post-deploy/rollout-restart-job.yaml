---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rollout-restart-sa
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rollout-restart-role
rules:
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "patch", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rollout-restart-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rollout-restart-role
subjects:
  - kind: ServiceAccount
    name: rollout-restart-sa
    namespace: linkerd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: rollout-restart-job
  namespace: linkerd
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 3
  completions: 1
  parallelism: 1
  template:
    spec:
      serviceAccountName: rollout-restart-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: kubectl
          image: altinncr.azurecr.io/docker.io/bitnami/kubectl:latest
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command: ["sh", "-c"]
          args:
            - |
              # Check if linkerd label is set in kube-system ns, if not set
              if ! kubectl label ns kube-system --list=true | grep -q config.linkerd.io/admission-webhooks=disabled; then
                kubectl label ns kube-system config.linkerd.io/admission-webhooks=disabled
              fi
              # Define excluded namespaces
              EXCLUDED_NAMESPACES="cert-manager flux-system kube-node-lease kube-public kube-system linkerd"
              # Get all namespaces and filter out excluded ones
              ALL_NAMESPACES=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')
              # Restart workloads in all namespaces except excluded ones
              for ns in $ALL_NAMESPACES; do
                skip=false
                for excluded in $EXCLUDED_NAMESPACES; do
                  if [ "$ns" = "$excluded" ]; then
                    echo "Skipping excluded namespace: $ns"
                    skip=true
                    break
                  fi
                done
                if [ "$skip" = false ]; then
                  echo "Restarting workloads in namespace: $ns"
                  kubectl -n "$ns" rollout restart deployments,statefulsets,daemonsets 2>/dev/null || echo "No workloads to restart in namespace: $ns"
                fi
              done
      restartPolicy: Never
