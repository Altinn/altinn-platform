name: Scan and Release Docker image to GHCR

on:
    workflow_call:
        inputs:
            workdir:
                description: 'Folder containing the Docker context'
                required: true
                type: string
            image_name:
                description: 'Name of the Docker image'
                required: true
                type: string
            tag_prefix:
                description: 'Tag prefix that triggers the release'
                required: false
                default: '-'
                type: string
            release_latest:
                description: 'Push image from main branch with latest tag'
                required: false
                default: false
                type: boolean
            platforms:
                description: 'Platforms to build the image for'
                required: false
                default: 'linux/amd64,linux/arm64'
                type: string

env:
  TAG_PREFIX: ${{ inputs.tag_prefix }}
  RELEASE_LATEST: ${{ inputs.release_latest }}

jobs:
  ensureEnvironment:
    runs-on: ubuntu-latest
    outputs:
      tag_prefix: ${{ steps.envVars.outputs.tag_prefix }}
      release_latest: ${{ steps.envVars.outputs.release_latest }}
    steps:
      - name: Pass inputs as job output(s)
        id: envVars
        run: |
          ## This is a hack to ensure that the if condition in the release-tag job works ref: https://github.com/actions/runner/issues/1602
          tag_prefix=${{ env.TAG_PREFIX }}
          release_latest=${{ env.RELEASE_LATEST }}
          
          if [[ "$tag_prefix" -ne "-" ]]; then
            echo "No tag prefix provided"
          else
            echo "Tag prefix provided: $tag_prefix"
          fi
          
          echo "tag_prefix=$tag_prefix" >> $GITHUB_OUTPUT

          if [[ "$release_latest" = true ]]; then
            echo "Release latest is true"
          else
            echo "Release latest is false"
          fi

          echo "release_latest=$release_latest" >> $GITHUB_OUTPUT
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build local image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.workdir}}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ inputs.image_name }}:scan
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ inputs.image_name }}:scan
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          trivyignores: ${{ inputs.workdir}}/.trivyignore
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
  release-tag:
    runs-on: ubuntu-latest
    needs: 
      - ensureEnvironment
      - scan
    if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
    steps:
      - uses: actions/checkout@v4
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
      - name: Get variables from tags
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        id: vars
        run: |
          tag=${GITHUB_REF/refs\/tags\/${{ inputs.tag_prefix }}/}
          echo "version=${tag%-demo}" >> $GITHUB_OUTPUT
          echo "reponame=${GITHUB_REPOSITORY,,}" >>${GITHUB_OUTPUT}
      - name: Get Git commit timestamps
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Set up QEMU
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push
        if: ${{ needs.ensureEnvironment.outputs.tag_prefix }} != '-' && github.ref == 'refs/tags/${{ needs.ensureEnvironment.outputs.tag_prefix }}*'
        id: docker_push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.workdir }}
          push: true
          platforms: ${{ inputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/${{ steps.vars.outputs.reponame }}/${{inputs.image_name}}:v${{ steps.vars.outputs.version }}
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}

  release-main:
    runs-on: ubuntu-latest
    needs: 
      - ensureEnvironment
      - scan
    if: github.ref == 'refs/heads/main' && ${{ needs.ensureEnvironment.outputs.release_latest }}
    steps:
      - uses: actions/checkout@v4
      - name: Get variables from tags
        id: vars
        run: |
          echo "reponame=${GITHUB_REPOSITORY,,}" >>${GITHUB_OUTPUT}
      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push
        id: docker_push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.workdir }}
          push: true
          platforms: ${{ inputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/${{ steps.vars.outputs.reponame }}/${{inputs.image_name}}:latest
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}