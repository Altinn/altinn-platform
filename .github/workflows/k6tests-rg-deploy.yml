name: k6tests-rg

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'refs/heads/main')}}

on:
  pull_request:
    types:
      - opened
      - closed
      - synchronize
      - reopened
    branches:
      - main
    paths:
      - .github/workflows/k6tests-rg-deploy.yml
      - actions/terraform/apply/**
      - actions/terraform/plan/**
      - infrastructure/adminservices-test/k6tests-rg/**
  workflow_dispatch:
    inputs:
      log_level:
        required: true
        description: Terraform Log Level
        default: INFO
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - WARN
          - ERROR

env:
  ENVIRONMENT: test
  TF_STATE_NAME: k6tests-rg.tfstate
  TF_PROJECT: ./infrastructure/adminservices-test/k6tests-rg
  TF_FOUNDATIONAL_MODULE: module.foundational
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.TF_AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: 1ce8e9af-c2d6-44e7-9c5e-099a308056fe

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  plan:
    name: Plan
    environment: reader
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Azure login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Init
        id: terraform_init
        uses: Altinn/altinn-platform/actions/terraform/init@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        with:
          working_directory: ${{ env.TF_PROJECT }}
          oidc_type: environment
          oidc_value: ${{ env.ENVIRONMENT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tf_state_name: ${{ env.TF_STATE_NAME }}

      - name: Get k6tests_cluster_name and k6tests_resource_group_name from Terraform output
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        id: get_outputs_from_terraform
        shell: bash
        working-directory: ${{ env.TF_PROJECT }}
        run: |
          if ! terraform output k6tests_cluster_name; then
            echo "Failed to get cluster name from terraform output"
            exit 1
          fi
          echo "CLUSTER_NAME=$(terraform output -raw k6tests_cluster_name)" >> "$GITHUB_OUTPUT"

          if ! terraform output k6tests_resource_group_name; then
            echo "Failed to get resource group name from terraform output"
            exit 1
          fi
          echo "RESOURCE_GROUP_NAME=$(terraform output -raw k6tests_resource_group_name)" >> "$GITHUB_OUTPUT"

      - name: Populate kubeconfig with k6 context
        id: populate_kubeconfig_with_k6_context
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        shell: bash
        env:
          CLUSTER_NAME: ${{ steps.get_outputs_from_terraform.outputs.CLUSTER_NAME }}
          RESOURCE_GROUP_NAME: ${{ steps.get_outputs_from_terraform.outputs.RESOURCE_GROUP_NAME }}
        run: |
          if ! az aks install-cli; then
            echo "Failed to install kubectl CLI"
            exit 1
          fi

          if ! az aks get-credentials --resource-group $RESOURCE_GROUP_NAME --name $CLUSTER_NAME --context k6tests-cluster --overwrite-existing; then
            echo "Failed to populate kubeconfig"
            exit 1
          fi

          if ! kubelogin convert-kubeconfig -l azurecli; then
            echo "Failed to convert kubeconfig"
            exit 1
          fi

      - name: Terraform Plan Foundational Module
        id: terraform_partial_plan
        uses: Altinn/altinn-platform/actions/terraform/plan-only@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        if: contains(github.event.pull_request.labels.*.name, 'partial-plan-apply')
        with:
          working_directory: ${{ env.TF_PROJECT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tf_args: -target=${{ env.TF_FOUNDATIONAL_MODULE }}

      - name: Terraform Plan
        id: terraform_plan
        uses: Altinn/altinn-platform/actions/terraform/plan-only@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        with:
          working_directory: ${{ env.TF_PROJECT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Write Terraform Summary
        uses: Altinn/altinn-platform/actions/terraform/write-terraform-summary@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        with:
          working_directory: ${{ env.TF_PROJECT }}
          oidc_type: environment
          oidc_value: ${{ env.ENVIRONMENT }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          VALIDATE_STEP_OUTPUT: ${{steps.terraform_init.outputs.validate_step_stdout}}
          VALIDATE_STEP_OUTCOME: ${{steps.terraform_init.outputs.validate_step_outcome}}
          FMT_STEP_OUTPUT: ${{steps.terraform_init.outputs.fmt_step_stdout}}
          FMT_STEP_OUTCOME: ${{steps.terraform_init.outputs.fmt_step_outcome}}
          INIT_STEP_OUTPUT: ${{steps.terraform_init.outputs.init_step_stdout}}
          INIT_STEP_OUTCOME: ${{steps.terraform_init.outputs.init_step_outcome}}
          PLAN_STEP_EXITCODE: "${{ steps.terraform_plan.outputs.plan_step_exitcode != '' && steps.terraform_plan.outputs.plan_step_exitcode || steps.terraform_partial_plan.outputs.plan_step_exitcode }}"
          PLAN_STEP_OUTCOME: "${{ steps.terraform_plan.outputs.plan_step_outcome != '' && steps.terraform_plan.outputs.plan_step_outcome || steps.terraform_partial_plan.outputs.plan_step_outcome }}"

  deploy:
    name: Deploy
    environment: test
    if: github.ref == 'refs/heads/main' && github.event.pull_request.merged == true
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Azure login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Init
        uses: Altinn/altinn-platform/actions/terraform/init@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        with:
          working_directory: ${{ env.TF_PROJECT }}
          oidc_type: environment
          oidc_value: ${{ env.ENVIRONMENT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tf_state_name: ${{ env.TF_STATE_NAME }}

      - name: Get k6tests_cluster_name and k6tests_resource_group_name from Terraform output
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        id: get_outputs_from_terraform
        shell: bash
        working-directory: ${{ env.TF_PROJECT }}
        run: |
          if ! terraform output k6tests_cluster_name; then
            echo "Failed to get cluster name from terraform output"
            exit 1
          fi
          echo "CLUSTER_NAME=$(terraform output -raw k6tests_cluster_name)" >> "$GITHUB_OUTPUT"

          if ! terraform output k6tests_resource_group_name; then
            echo "Failed to get resource group name from terraform output"
            exit 1
          fi
          echo "RESOURCE_GROUP_NAME=$(terraform output -raw k6tests_resource_group_name)" >> "$GITHUB_OUTPUT"

      - name: Populate kubeconfig with k6 context
        id: populate_kubeconfig_with_k6_context
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        shell: bash
        env:
          CLUSTER_NAME: ${{ steps.get_outputs_from_terraform.outputs.CLUSTER_NAME }}
          RESOURCE_GROUP_NAME: ${{ steps.get_outputs_from_terraform.outputs.RESOURCE_GROUP_NAME }}
        run: |
          if ! az aks install-cli; then
            echo "Failed to install kubectl CLI"
            exit 1
          fi

          if ! az aks get-credentials --resource-group $RESOURCE_GROUP_NAME --name $CLUSTER_NAME --context k6tests-cluster --overwrite-existing; then
            echo "Failed to populate kubeconfig"
            exit 1
          fi

          if ! kubelogin convert-kubeconfig -l azurecli; then
            echo "Failed to convert kubeconfig"
            exit 1
          fi

      - name: Terraform Apply Foundational Module
        uses: Altinn/altinn-platform/actions/terraform/apply-only@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        if: contains(github.event.pull_request.labels.*.name, 'partial-plan-apply')
        with:
          working_directory: ${{ env.TF_PROJECT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tf_args: -target=${{ env.TF_FOUNDATIONAL_MODULE }}

      - name: Terraform Apply
        uses: Altinn/altinn-platform/actions/terraform/apply-only@ee2c9590639e882a4b87f9da9c71c9ab9bf25053 # main
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'partial-plan-apply') }}
        with:
          working_directory: ${{ env.TF_PROJECT }}
          arm_client_id: ${{ env.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
