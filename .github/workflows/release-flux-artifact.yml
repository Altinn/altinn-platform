name: Build Flux Artifact

on:
  push:
    branches:
      - main
    paths:
      - flux/*/**
  release:
    types:
      - created

env:
  RELEASE_TAG_PREFIX: "flux-oci-"

permissions:
  id-token: write
  contents: read

jobs:
  build-latest:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0
      - name: Prepare Job for Pushing Flux OCI Artifacts to Azure Container Registry
        id: setup_flux_acr
        uses: ./actions/flux/setup-flux-acr
        with:
          azure_subscription_id: ${{ secrets.AZURE_ALTINNACR_SUBSCRIPTION_ID }}
          azure_app_id: ${{ secrets.AZURE_ALTINNACR_APP_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Build and push artifacts with commit sha tag
        env:
          REGISTRY: altinncr.azurecr.io
        run: |
          echo '### Check if there are any changes in ./flux/ folder'
          FLUX_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep '^flux/' || true)
          if [ -z "${FLUX_FILES}" ]; then
            echo "No artifacts to process."
            exit 0
          fi

          # Extract unique folder names directly under ./manifests/infra/
          ARTIFACTS=$(echo "${FLUX_FILES}" | awk -F'/' '{print $2}' | sort -u)
          for artifact in $ARTIFACTS;do
            echo "Processing artifact: ${artifact}"
            flux push artifact "oci://${REGISTRY}/manifests/infra/${artifact}:$(git rev-parse --short HEAD)" \
              --provider=azure \
              --reproducible \
              --path="./flux/${artifact}" \
              --source="$(git config --get remote.origin.url)" \
              --revision="$(git branch --show-current)/$(git rev-parse HEAD)"
            flux tag artifact "oci://${REGISTRY}/manifests/infra/${artifact}:$(git rev-parse --short HEAD)" \
              --provider=azure \
              --tag latest
          done
  tag-release:
    runs-on: ubuntu-latest
    environment: flux-release
    if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.event.release.tag_name, 'flux-oci-')
    steps:
      - name: Checkout Code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Extract release name and version
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        id: extract-release
        with:
          script: |
            const releaseRegex = /${{ env.RELEASE_TAG_PREFIX }}(.*?)-v(\d+\.\d+\.\d+)/;
            const match = context.payload.release.tag_name.match(releaseRegex);
            if (match) {
              const releaseName = match[1];
              const releaseVersion = match[2];
              core.setOutput('releaseName', releaseName);
              core.setOutput('releaseVersion', releaseVersion);
              // Check if the release name corresponds to a folder in ./flux/
              const releaseFolder = `./flux/${releaseName}`;
              const fs = require('fs');
              if (!fs.existsSync(releaseFolder)) {
                core.setFailed(`Release folder does not exist: ${releaseFolder}`);
                return;
              }
            } else {
              core.setFailed(`Release tag name does not match expected format: ${context.payload.release.tag_name}`);
              return;
            }
      - name: Add release tag to artifacts
        uses: ./actions/flux/build-push-image
        with:
          image_name: "manifests/infra/${{ steps.extract-release.outputs.releaseName }}"
          tag: ${{ steps.extract-release.outputs.releaseVersion }}
          workdir: "./flux/${{ steps.extract-release.outputs.releaseName }}"
          azure_subscription_id: ${{ secrets.AZURE_ALTINNACR_SUBSCRIPTION_ID }}
          azure_app_id: ${{ secrets.AZURE_ALTINNACR_APP_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
